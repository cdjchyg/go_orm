package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

var (
	flags flag.FlagSet
)

func main() {
	showVersion := flags.Bool("version", false, "print the version and exit")
	flags.Parse(os.Args[1:])
	if *showVersion {
		fmt.Fprintf(os.Stderr, "%v %v\n", filepath.Base(os.Args[0]), "v1.0.0")
		os.Exit(0)
	}

	var genFlags flag.FlagSet

	protogen.Options{
		ParamFunc: genFlags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	if len(file.Messages) == 0 {
		return
	}

	filename := file.GeneratedFilenamePrefix + "_fields.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-mongo. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// \tprotoc-gen-mongo v1.0.0")
	g.P("// \tprotoc        ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// 生成导入
	generateImports(g)

	// 生成结构体和方法
	for _, message := range file.Messages {
		generateMessage(g, message)
	}
}

func generateImports(g *protogen.GeneratedFile) {
	g.P("import (")
	g.P("\t\"reflect\"")
	g.P(")")
	g.P()

	// 生成ParentNotifier接口
	g.P("// ParentNotifier 定义父对象通知接口，避免使用反射")
	g.P("type ParentNotifier interface {")
	g.P("\tNotifyFieldChanged(fieldIndex int)")
	g.P("}")
	g.P()
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
